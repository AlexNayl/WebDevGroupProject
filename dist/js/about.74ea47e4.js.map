{"version":3,"file":"js/about.74ea47e4.js","mappings":"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","sources":["webpack://webdevgroupproject/./src/views/MineSweeper.vue","webpack://webdevgroupproject/./src/components/MineSweeperGame.vue","webpack://webdevgroupproject/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://webdevgroupproject/./public/scripts/minesweeper.js","webpack://webdevgroupproject/./src/components/MineSweeperGame.vue?d662","webpack://webdevgroupproject/./src/views/MineSweeper.vue?2acf"],"sourcesContent":["<template>\n    <div class=\"MineSweeper\">\n        <h1>MineSweeper</h1>\n        <MineSweeperGame />\n    </div>\n</template>\n\n<script>\n    import MineSweeperGame from '@/components/MineSweeperGame.vue'\n    export default {\n        name: \"MineSweeper\",\n        title: \"Minesweeper\",\n        components: {\n            MineSweeperGame,\n        },\n    }\n</script>","<template>\n    <p>Flags Placed: {{flagsPlaced}}</p>\n    <p>Time: {{time}}</p>\n    <p id=\"board-size\">Board Size: {{boardSize}}</p>\n    <div>\n        <input type=\"range\" min=\"6\" max=\"12\" value=\"9\" class=\"slider\" id=\"board-size-slider\">\n    </div>\n    <p id=\"bombs\">Bombs: {{bombs}}</p>\n    <div>\n        <input type=\"range\" min=\"5\" max=\"50\" value=\"10\" class=\"slider\" id=\"bombs-slider\">\n    </div>\n    <button @click=\"reset\" id=\"resetButton\">New Game</button>\n    <div id=\"gameDiv\"></div>\n</template>\n\n<script>\n    import Minesweeper from \"@/../public/scripts/minesweeper.js\";\n\timport $ from 'jquery';\n    import '@/../public/stylesheets/minesweeper.css';\n\n    export default {\n        name: \"MineSweeperGame\",\n        data(){\n            return {\n                game: null,\n                flagsPlaced: 0,\n                boardSize: 0,\n                bombs: 0,\n                time: 0,\n            }\n        },\n        methods: {\n            // Start Up Code\n            startup: function(){\n                this.boardSize = $(\"#board-size-slider\").val();\n                this.bombs = $(\"#bombs-slider\").val();\n                this.game = new Minesweeper(this.boardSize, this.bombs, this);\n                \n                $(\"#board-size-slider\").change(() => {\n                    this.updateBoardSize();\n                });\n\n                $(\"#bombs-slider\").change(() => {\n                    this.updateBombs();\n                });\n            },\n            updateBoardSize() {\n                let val = document.querySelector(\"#board-size-slider\").value;\n                this.boardSize = val;\n                this.updateBombs(); // Update number of bombs in case we have exceeded max bomb count\n            },\n            updateBombs() {\n                let val = document.querySelector(\"#bombs-slider\").value;\n                val = Math.floor(Math.min(val, this.boardSize * this.boardSize / 3)); // Max number of bombs should be 1/3 board size\n                this.bombs = val;\n            },\n            reset: function (){\n                this.game.reset(this.bombs, this.boardSize);\n            },\n        }, \n        mounted(){\n            // Call Start Up Code\n            this.$nextTick(() => {\n                this.startup();\n            })\n        },\n    }\n</script>","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import $ from 'jquery';\nimport accessHighscores from '@/../public/scripts/access_highscores.js';\n/*\n * Name: minesweeperHighScore\n * Description: Calculates a highscore for a minesweepr game\n * Return: A score\n*/\nfunction minesweeperHighScore(duration, boardSize, numBombs){\n    const MAX_SCORE_DURATION = 1000; // Max duration after which score is not affected\n    const SCORE_DURATION_COEFFICIENT = 1000; // How much the duration affects the score\n    return Math.ceil(numBombs / boardSize * Math.max(1, (MAX_SCORE_DURATION - duration) * SCORE_DURATION_COEFFICIENT));\n}\n\n/*\n * Name: inArray\n * Description: Searchs an array for an element\n * Return: True if element is in array otherwise false\n*/\nfunction inArray(array, element){\n\t\tfor (let i = 0; i < array.length; i++){\n\t\t\tif (element == array[i]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n/*\n * Class Name: Minesweeper \n * Description: Runs a game of minesweeper \n*/\nexport default class Minesweeper{\n\tstatic MAX_BOMBS_3X3 = 6; // Limit on how many bombs can appear in a 3x3 grid area\n\t/*\n     * Name: constructor\n     * Description: Creates a new Minesweeper instasnce\n     * Return: None\n    */\n\tconstructor(boardSize, numBombs, vuePage){\n\t\tthis.boardSize = boardSize; // Size of the Minesweeper board\n\t\tthis.numBombs = numBombs; // Number of bombs present in the game\n\t\tthis.vuePage = vuePage; // Reference to the page. Used for accessing page variables\n\t\tthis.setup(); // Setup the game\n\t}\n\n\t/*\n     * Name: setup\n     * Description: Sets up a game of minesweeper\n     * Return: None\n    */\n\tsetup(){\n\t\tthis.bombLocations = []; // Locations where bombs are placed\n\t\tthis.started = false; \n\t\tthis.startedTime = 0; // 0 is a placeholder it will be number of seconds since EPOCH\n\t\tthis.gameOver = false; \n\t\tthis.flagsPlaced = 0; \n\t\tthis.vuePage.flagsPlaced = this.flagsPlaced;\n\n\t\t// Timer that will be used for score and displayed to the user\n\t\tsetInterval(() => {\n\t\t\tif (this.started && !this.gameOver){\n\t\t\t\tthis.vuePage.time = Math.round(new Date().getTime() / 1000) - this.startedTime;\n\t\t\t}\n\t\t}, 1000); // Update timer every second\n\n\t\t// Setup Board\n\t\tlet board = document.getElementById(\"gameBoard\");\n\t\t\n\t\t// if the board is already present then delete it\n\t\tif (board){\n\t\t\tboard.remove();\n\t\t}\n\n\t\tthis.makeBoard();\n\n\t\t//Event Handlers\n\n\t\t// Disable right click browser menu on game squares\n\t\t$(\".gamesquare\").contextmenu(function(){\n\t\t\treturn false;\n\t\t});\n\n\t\t// Use a reference to the game instance for setting up event handling\n\t\tlet gameInstance = this;\n\t\t// Set up left and right click events\n\t\t$(\".gamesquare\").mousedown(function(event){\n\t\t\tif (event.which == 1){ // if left click\n\t\t\t\tgameInstance.clickSquare(this);\n\t\t\t}else if (event.which == 3){ // if right click\n\t\t\t\tgameInstance.rightClickSquare(this);\n\t\t\t}\n\t\t});\n\n\t\tthis.addBombs(); // Add the bombs to the game \n\t\t// The game is now setup\n\t}\n\n\t/*\n     * Name: makeBoard\n     * Description: Makes a table representing the Minesweeper board\n     * Return: None\n    */\n\tmakeBoard(){\n\t\tlet gameDiv = document.getElementById(\"gameDiv\"); // Div that the game is stored in\n\t\tlet resetButton = document.getElementById(\"resetButton\"); // Get the reset button\n\n\t\t// If the game Div or Reset button are not found then cease making the board\n\t\tif (!gameDiv || !resetButton){ return; }\n\n\t\t// Create the table\n\t\tlet gameBoard = document.createElement(\"table\");\n\t\tgameBoard.setAttribute(\"id\", \"gameBoard\");\n\t\tgameDiv.appendChild(gameBoard);\n\t\tfor (let row = 0; row < this.boardSize; row++){\n\t\t\tlet gameRow = document.createElement(\"tr\");\n\t\t\tgameBoard.appendChild(gameRow);\n\t\t\tfor (let col = 0; col < this.boardSize; col++){\n\t\t\t\tlet gameSquare = document.createElement(\"td\");\n\t\t\t\tgameRow.appendChild(gameSquare);\n\t\t\t\tgameSquare.setAttribute(\"id\", row.toString() + \",\" + col.toString());\n\t\t\t\tgameSquare.setAttribute(\"class\", \"gamesquare unknownsquare\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n     * Name: reset\n     * Description: Starts a new game\n     * Return: None\n    */\n\treset(numBombs, boardSize){\n\t\tthis.numBombs = numBombs;\n\t\tthis.boardSize = boardSize;\n\t\tthis.setup();\n\t}\n\n\t/*\n     * Name: clickSquare\n     * Description: Handles the action of clicking on a square\n     * Return: None\n    */\n\tclickSquare(square){\n\n\t\t// If the game is not started then start the game\n\t\tif (!this.started){\n\t\t\tthis.startedTime = Math.round(new Date().getTime() / 1000);\n\t\t\tthis.started = true;\n\t\t}\n\n\t\t// Square must be either of type 'unknownsquare' or in the circumstances of a game being over a flagsquare is also allowed\n\t\tif (!(square.classList.contains(\"unknownsquare\")) && !(this.gameOver && square.classList.contains(\"flagsquare\"))){\n\t\t\treturn;\n\t\t}\n\n\t\t// Square once clicked is no longer unknown\n\t\tsquare.classList.remove(\"unknownsquare\");\n\n\t\t// Incase user clicks on bomb (the !gameOver part is for revealing the entire board)\n\t\tif (inArray(this.bombLocations, square.id)){\n\t\t\t// If game is over then this is a flag square needs to be removed to allow bomb image\n\t\t\tif (this.gameOver){\n\t\t\t\tsquare.classList.remove(\"flagsquare\");\n\t\t\t}\n\t\t\tsquare.classList.add(\"bombsquare\");\n\t\t\tif (!this.gameOver){\n\t\t\t\tthis.endGame();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet squareRow = this.getRow(square.id);\n\t\tlet squareCol = this.getCol(square.id);\n\t\tlet bombsNear = this.countBombsNear(squareRow, squareCol);\n\t\t\n\t\t// When no bombs near a square then nearby squares can be cleared\n\t\tif (bombsNear == 0){\n\t\t\tthis.clearNearBy(squareRow, squareCol);\n\t\t}\n\n\t\t// Else add number of bombs\n\t\tsquare.classList.add(\"bombsnear\" + bombsNear.toString());\n\t\tif (!this.gameOver){\n\t\t\tthis.checkGameOver()\n\t\t}\n\t}\n\n\n\t/*\n     * Name: clearNearBy\n     * Description: Clears an area around a specified square\n     * Return: None\n    */\n\tclearNearBy(squareRow, squareCol){\n\t\t// Search the 3x3 grid around a square and artificially click them\n\t\tfor (let row = Math.max(squareRow - 1, 0); row < Math.min(squareRow + 2, this.boardSize); row++){\n\t\t\tfor (let col = Math.max(squareCol - 1, 0); col < Math.min(squareCol + 2, this.boardSize); col++){\n\t\t\t\tthis.clickSquare(document.getElementById(row.toString() + \",\" + col.toString()));\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/*\n     * Name: countBombsNear\n     * Description: Counts the bombs in a 3x3 grid aruound a square\n     * Return: The number of bombs nearby\n    */\n\tcountBombsNear(squareRow, squareCol){\n\t\tlet bombsNear = 0;\n\n\t\t// Search the 3x3 grid\n\t\tfor (let row = Math.max(squareRow - 1, 0); row < Math.min(squareRow + 2, this.boardSize); row++){\n\t\t\tfor (let col = Math.max(squareCol - 1, 0); col < Math.min(squareCol + 2, this.boardSize); col++){\n\t\t\t\t// Save searching useless spot\n\t\t\t\tif (row == squareRow && col == squareCol){ continue; }\n\t\t\t\t// checks all the bomb locations to see if the square is a bomb\n\t\t\t\tif (inArray(this.bombLocations, row.toString() + \",\" + col.toString())){\n\t\t\t\t\tbombsNear += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn bombsNear;\n\t}\n\n\n\t/*\n     * Name: rightClickSquare\n     * Description: Simulates a user right clicking a square\n     * Return: None\n    */\n\trightClickSquare(square){\n\t\t// Squares cannot be right clicked after the game has ended so return\n\t\tif (this.gameOver){\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the square is an unknown square or flag then flag or unflag it\n\t\tif (inArray(square.classList, \"unknownsquare\")){\n\t\t\tsquare.classList.add(\"flagsquare\");\n\t\t\tsquare.classList.remove(\"unknownsquare\");\n\t\t\tthis.flagsPlaced++;\n\t\t\tthis.vuePage.flagsPlaced = this.flagsPlaced;\n\t\t}else if(inArray(square.classList, \"flagsquare\")){\n\t\t\tsquare.classList.remove(\"flagsquare\");\n\t\t\tsquare.classList.add(\"unknownsquare\");\n\t\t\tthis.flagsPlaced--;\n\t\t\tthis.vuePage.flagsPlaced = this.flagsPlaced;\n\t\t}\n\t}\n\n\t/*\n     * Name: endGame\n     * Description: Ends the game\n     * Return: None\n    */\n\tendGame(win=false){\n\t\tthis.gameOver = true;\n\n\t\t// Simulate a click on each square to show the user the complete board\n\t\tfor (let i = 0; i < this.boardSize; i++){\n\t\t\tfor (let j = 0; j < this.boardSize; j++){\n\t\t\t\tthis.clickSquare(document.getElementById(i.toString() + \",\" + j.toString()));\n\t\t\t}\n\t\t}\n\n\t\t// End the timer loop\n\t\tclearTimeout();\n\n\t\t// Win or lose. Update the database if win\n\t\tif (win){\n\t\t\t// Calculate the results of the game and \n\t\t\tlet duration = Math.round(new Date().getTime() / 1000) - this.startedTime;\n\t\t\tthis.vuePage.time = duration;\n\t\t\taccessHighscores.updateHighscores(minesweeperHighScore(duration, this.boardSize, this.numBombs), prompt(\"Enter a name:\"), \"minesweeper\")\n\t\t}else{\n\t\t\talert(\"You lose! Press Reset to reset!\");\n\t\t}\n\t}\n\n\t/*\n     * Name: addBombs\n     * Description: Adds the bombs to the game\n     * Return: None\n    */\n\taddBombs(){\n\t\tlet possibleLocations = [];\n\n\t\t// Add all locations as possible locations for a bomb\n\t\tfor (let i = 0; i < this.boardSize; i++){\n\t\t\tfor (let j = 0; j < this.boardSize; j++){\n\t\t\t\tpossibleLocations.push(i.toString() + \",\" + j.toString());\n\t\t\t}\n\t\t}\n\n\t\tlet bombs2place = this.numBombs; // remaining boms to place\n\n\t\t// Randomly select a location and see if its acceptable\n\t\twhile(bombs2place > 0 && possibleLocations.length > 0){\n\t\t\tlet locIndex = Math.floor(Math.random() * possibleLocations.length);\n\t\t\tlet loc = possibleLocations[locIndex];\n\t\t\t// Remove loc from possibilities\n\t\t\tpossibleLocations[locIndex] = possibleLocations[0];\n\t\t\tpossibleLocations.shift();\n\t\t\tif (this.acceptableBombLoc(loc)){\n\t\t\t\tthis.bombLocations.push(loc);\n\t\t\t\tbombs2place--;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Subtract the bombs that failed to place from the counter\n\t\tthis.vuePage.bombs -= bombs2place; \n\t}\n\n\t/*\n     * Name: acceptableBombLoc\n     * Description: Determines whether a location is a suitable place to add a bomb\n     * Return: True if acceptable false otherwise\n    */\n\tacceptableBombLoc(loc){\n\t\tlet squareRow = this.getRow(loc);\n\t\tlet squareCol = this.getCol(loc);\n\n\t\t// Search 3x3 grid around location for bombs\n\t\tfor (let row = Math.max(squareRow - 1, 0); row < Math.min(squareRow + 2, this.boardSize); row++){\n\t\t\tfor (let col = Math.max(squareCol - 1, 0); col < Math.min(squareCol + 2, this.boardSize); col++){\n\t\t\t\tlet bombsNearBy = this.countBombsNear(row, col);\n\t\t\t\t// If too many bombs nearby then not acceptable location\n\t\t\t\tif (bombsNearBy >= Minesweeper.MAX_BOMBS_3X3){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/*\n     * Name: checkGameOver\n     * Description: Checks if the game is over and ends the game is required\n     * Return: None\n    */\n\tcheckGameOver(){\n\t\tlet unknownOrBombCount = 0; // Amount of unknown/bomb sequares\n\n\t\t// Search the entire board\n\t\tfor (let row = 0; row < this.boardSize; row++){\n\t\t\tfor (let col = 0; col < this.boardSize; col++){\n\t\t\t\tlet square = document.getElementById(row.toString() + \",\" + col.toString());\n\t\t\t\t// Counts the number of unknown and flagged squares\n\t\t\t\tif (square.classList.contains(\"unknownsquare\") || square.classList.contains(\"flagsquare\")){\n\t\t\t\t\tunknownOrBombCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If number of unknowns = number of bombs then user has won\n\t\tif (unknownOrBombCount == this.numBombs){\n\t\t\tthis.endGame(true);\n\t\t}\n\t}\n\n\n\t/*\n     * Name: getRow\n     * Description: Gets a row from a given string\n     * Return: Row integer\n    */\n\tgetRow(str){\n\t\treturn parseInt(str.split(\",\")[0]);\n\t}\n\n\t/*\n     * Name: getCol\n     * Description: Gets a col from a given string\n     * Return: Col integer\n    */\n\tgetCol(str){\n\t\treturn parseInt(str.split(\",\")[1]);\n\t}\n}","import { render } from \"./MineSweeperGame.vue?vue&type=template&id=63f54ed4\"\nimport script from \"./MineSweeperGame.vue?vue&type=script&lang=js\"\nexport * from \"./MineSweeperGame.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/mnt/d/School/WebDevGroupProject/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./MineSweeper.vue?vue&type=template&id=3ac71ac5\"\nimport script from \"./MineSweeper.vue?vue&type=script&lang=js\"\nexport * from \"./MineSweeper.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/mnt/d/School/WebDevGroupProject/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementVNode","_createElementBlock","_hoisted_2","_createVNode","_component_MineSweeperGame","id","type","min","max","value","_toDisplayString","$data","_hoisted_4","onClick","$options","_hoisted_5","_defineProperty","obj","key","Object","defineProperty","enumerable","configurable","writable","minesweeperHighScore","duration","boardSize","numBombs","MAX_SCORE_DURATION","SCORE_DURATION_COEFFICIENT","Math","ceil","inArray","array","element","i","length","Minesweeper","constructor","vuePage","this","setup","bombLocations","started","startedTime","gameOver","flagsPlaced","setInterval","time","round","Date","getTime","board","document","getElementById","remove","makeBoard","$","contextmenu","gameInstance","mousedown","event","which","clickSquare","rightClickSquare","addBombs","gameDiv","resetButton","gameBoard","createElement","setAttribute","appendChild","row","gameRow","col","gameSquare","toString","reset","square","classList","contains","add","endGame","squareRow","getRow","squareCol","getCol","bombsNear","countBombsNear","clearNearBy","checkGameOver","win","j","clearTimeout","accessHighscores","prompt","alert","possibleLocations","push","bombs2place","locIndex","floor","random","loc","shift","acceptableBombLoc","bombs","bombsNearBy","MAX_BOMBS_3X3","unknownOrBombCount","str","parseInt","split","name","data","game","methods","startup","val","change","updateBoardSize","updateBombs","querySelector","mounted","$nextTick","__exports__","title","components","MineSweeperGame","render"],"sourceRoot":""}